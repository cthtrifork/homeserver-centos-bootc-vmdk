name: Build homeserver bootable container image
on:
  schedule:
    - cron: "0 3 * * 0" # Runs at 03:00, only on Sunday for security patching
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    paths:
      - "Containerfile"
      - "config.toml"
      - "system_files/"
      - "build_files/"
      - ".github/workflows/build-bootc-images.yaml"
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_DESC: "${{ github.event.repository.description }}"
  #IMAGE_LOGO_URL: "https://raw.githubusercontent.com/astrovm/amyos/main/repo_files/amy-logo-white.png" # Put your own image here for a fancy profile on https://artifacthub.io/!
  #IMAGE_NAME: "${{ github.event.repository.name }}" # output image name, usually same as repo name
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  DEFAULT_TAG: "latest"
  IMAGE_NAME: homeserver-centos-bootc
  BASE_IMAGE: ghcr.io/${{ github.repository }}/homeserver-centos-bootc:latest
  PR_IMAGE: localhost/homeserver-centos-bootc:latest # this should work when the image has been built
  CONTEXT: ./

jobs:
  build-bootc-image:
    name: Build bootable container image
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 10
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      tags: ${{ steps.build-image.outputs.tags }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PULL || secrets.PAT_RENOVATEBOT }}

      - name: Load image
        shell: bash
        run: |
          podman pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          systemctl --user enable --now podman.socket # for trivy
          export DOCKER_HOST='unix:///Users/<MY_USER>/.local/share/containers/podman/machine/podman-machine-default/podman.sock'

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like
          # 2022-02-08T15:38:15Z
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=0.1.${{ github.run_number }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/Containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      # Write secrets to temp files for --secret src=
      - name: Prepare build secrets
        run: |
          umask 077
          printf '%s' "${{ secrets.PAT_RENOVATEBOT }}" > /tmp/REGISTRY_TOKEN
          printf '%s' "${{ secrets.PINGGY_TOKEN }}" > /tmp/PINGGY_TOKEN
          cp ${HOME}/.docker/config.json /tmp/creds

      - name: Use buildah build to create the image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: ${{ env.CONTEXT }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          layers: true
          oci: false
          build-args: |
            REGISTRY_USERNAME="${{ github.repository_owner }}"
            REGISTRY_URL=ghcr.io
          containerfiles: |
            ${{ env.CONTEXT }}/Containerfile
          extra-args: |
            --secret id=registry_token,src=/tmp/REGISTRY_TOKEN
            --secret id=pinggy_token,src=/tmp/PINGGY_TOKEN
            --secret id=creds,src=/tmp/creds

      # Save PR image as tar so Trivy can scan without pushing
      - name: Save PR image as tar for Trivy
        if: ${{ github.event_name == 'pull_request' }}
        run: podman save "${{ env.PR_IMAGE }}" | gzip > pr-image.tar.gz

      - name: Upload PR image as a Github artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: pr-image
          path: "${{ github.workspace }}/pr-image.tar.gz"

      - name: Trivy (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          format: json
          output: base_trivy.json
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload trivy json report as a Github artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: base_trivy.json
          path: "${{ github.workspace }}/base_trivy.json"

      - name: Publish Trivy Output to Summary
        run: | #sh
          {
            echo "### Security Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```json'
            cat base_trivy.json
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY

      - name: Push to Container registry
        if: ${{ github.event_name != 'pull_request' }}
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.metadata.outputs.tags }}
          registry: ghcr.io/${{ github.repository }}

  run-on-main:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-bootc-image
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    steps:
      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable podman pull
        shell: bash
        run: |
          #podman pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          systemctl --user enable --now podman.socket # for trivy
          export DOCKER_HOST='unix:///${HOME}/.local/share/containers/podman/machine/podman.sock'

      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Trivy REPORT (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: "${{ github.workspace }}/trivy-results.sarif"
          category: trivy

      - name: Trivy SBOM (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          scan-type: image
          format: "github"
          output: "dependency-results.sbom.json"
          github-pat: ${{ secrets.GITHUB_TOKEN }} # or ${{ secrets.github_pat_name }} if you're using a PAT
          severity: "MEDIUM,HIGH,CRITICAL"
          scanners: "vuln"
          skip-setup-trivy: true
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload trivy report as a Github artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: trivy-sbom-report
          path: "${{ github.workspace }}/dependency-results.sbom.json"
          retention-days: 20 # 90 is the default

  run-on-pr:
    runs-on: ubuntu-latest
    needs: build-bootc-image
    if: ${{ github.event_name == 'pull_request' }}
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    steps:
      - name: Manual Trivy Setup
        uses: aquasecurity/setup-trivy@e6c2c5e321ed9123bda567646e2f96565e34abe1 # v0.2.4
        with:
          cache: true

      - name: Download PR image
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: pr-image
          path: "${{ github.workspace }}"

      - name: Download base_trivy.json
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: base_trivy.json
          path: "${{ github.workspace }}"

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load latest image
        shell: bash
        run: | #sh
          podman pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          systemctl --user enable --now podman.socket # for trivy
          export DOCKER_HOST='unix:///${HOME}/.local/share/containers/podman/machine/podman.sock'

      - name: Inspect images (Podman)
        id: meta
        shell: bash
        run: | #sh
          set -euo pipefail
          podman load -q -i ${{ github.workspace }}/pr-image.tar.gz
          podman images

          BASE_RAW=$(podman image inspect "${{ env.BASE_IMAGE }}" | jq '.[0]')
          PR_RAW=$(podman image inspect "${{ env.PR_IMAGE }}" | jq '.[0]')

          BASE_DIGEST=$(jq -r '.Digest // empty' <<<"$BASE_RAW")
          PR_DIGEST=$(jq -r '.Digest // empty' <<<"$PR_RAW")
          BASE_CREATED=$(jq -r '.Created // "n/a"' <<<"$BASE_RAW")
          PR_CREATED=$(jq -r '.Created // "n/a"' <<<"$PR_RAW")
          BASE_SIZE=$(jq -r '.Size // 0' <<<"$BASE_RAW")
          PR_SIZE=$(jq -r '.Size // 0' <<<"$PR_RAW")
          BASE_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$BASE_RAW")
          PR_LAYERS=$(jq -r '.RootFS.Layers | length' <<<"$PR_RAW")

          BASE_KEYS=$(jq -r '.Labels | keys[]?' <<<"$BASE_RAW" | sort || true)
          PR_KEYS=$(jq -r '.Labels | keys[]?' <<<"$PR_RAW" | sort || true)
          LABELS_CHANGED=$(comm -3 <(printf "%s\n" "$BASE_KEYS") <(printf "%s\n" "$PR_KEYS") | paste -sd, -)
          [[ -z "$LABELS_CHANGED" ]] && LABELS_CHANGED="_none_"

          echo "base_digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
          echo "pr_digest=$PR_DIGEST" >> $GITHUB_OUTPUT
          echo "base_created=$BASE_CREATED" >> $GITHUB_OUTPUT
          echo "pr_created=$PR_CREATED" >> $GITHUB_OUTPUT
          echo "base_size=$BASE_SIZE" >> $GITHUB_OUTPUT
          echo "pr_size=$PR_SIZE" >> $GITHUB_OUTPUT
          echo "base_layers=$BASE_LAYERS" >> $GITHUB_OUTPUT
          echo "pr_layers=$PR_LAYERS" >> $GITHUB_OUTPUT
          echo "labels_changed=$LABELS_CHANGED" >> $GITHUB_OUTPUT

      - name: Trivy (PR)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: pr-image.tar.gz
          format: json
          output: pr_trivy.json
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Publish Trivy Output to Summary
        run: | #sh
          {
            echo "### Security Output"
            echo "<details><summary>Click to expand</summary>"
            echo ""
            echo '```json'
            cat pr_trivy.json
            echo '```'
            echo "</details>"
          } >> $GITHUB_STEP_SUMMARY

      - name: Build report
        id: report
        shell: bash
        run: | #sh
          set -euo pipefail
          base_size=${{ steps.meta.outputs.base_size }}
          pr_size=${{ steps.meta.outputs.pr_size }}
          base_h=$(numfmt --to=iec --suffix=B "$base_size")
          pr_h=$(numfmt --to=iec --suffix=B "$pr_size")
          delta=$(( pr_size - base_size ))
          abs=${delta#-}
          delta_h=$(numfmt --to=iec --suffix=B "$abs")
          if   [[ $delta -gt 0 ]]; then trend="+${delta_h}"
          elif [[ $delta -lt 0 ]]; then trend="-${delta_h}"
          else trend="±0"; fi

          base_set=$(jq -r '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' base_trivy.json | sort || true)
          pr_set=$(jq -r   '[.Results[]?.Vulnerabilities[]? | .VulnerabilityID] | unique[]?' pr_trivy.json   | sort || true)
          new=$(comm -13 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          fix=$(comm -23 <(printf "%s\n" "$base_set") <(printf "%s\n" "$pr_set") | sort || true)
          new_n=$(printf "%s\n" "$new" | grep -c . || true)
          fix_n=$(printf "%s\n" "$fix" | grep -c . || true)
          new_top=$(printf "%s\n" "$new" | head -n 5 | paste -sd, -)
          [[ -z "$new_top" ]] && new_top="_none_"

          {
            echo "### 🧾 Image diff"
            echo
            echo "**Repo:** ghcr.io/${{ github.repository }}"
            echo "**Base:** \`${{ env.BASE_IMAGE }}\` (digest: ${{ steps.meta.outputs.base_digest || 'n/a' }})"
            echo "**PR:** \`${{ env.PR_IMAGE }}\` (digest: ${{ steps.meta.outputs.pr_digest || 'n/a' }})"
            #echo "- Trivy CVEs: ${pr_set}"
            echo
            echo "- Created: ${{ steps.meta.outputs.base_created }} → ${{ steps.meta.outputs.pr_created }}"
            echo "- Size (compressed): ${base_h} → ${pr_h} (**${trend}**)"
            echo "- Layers: ${{ steps.meta.outputs.base_layers }} → ${{ steps.meta.outputs.pr_layers }}" # (**${layer_delta}**)
            echo "- Labels changed: ${{ steps.meta.outputs.labels_changed }}"
            echo "- Trivy HIGH/CRIT: +${new_n} / -${fix_n} (new: ${new_top})"
          } > comment.md

      - name: Sticky PR comment (update in-place)
        uses: marocchino/sticky-pull-request-comment@773744901bac0e8cbb5a0dc842800d45e9b2b405 # v2
        with:
          path: comment.md
          skip_unchanged: true

      - name: Trivy REPORT (PR)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          input: pr-image.tar.gz
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"
          skip-setup-trivy: true
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@192325c86100d080feab897ff886c34abd4c83a3 # v3
        if: ${{ always() }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          sarif_file: "${{ github.workspace }}/trivy-results.sarif"
          category: trivy

  test:
    environment: dev
    runs-on: ubuntu-latest
    needs: build-bootc-image
    if: ${{ github.event_name == 'pull_request' }}
    continue-on-error: false
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      id-token: write
      pull-requests: write
    steps:
      - name: Download PR image
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        with:
          name: pr-image
          path: "${{ github.workspace }}"

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load PR image
        shell: bash
        run: | #sh
          systemctl --user enable --now podman.socket # for trivy
          export DOCKER_HOST='unix:///${HOME}/.local/share/containers/podman/machine/podman.sock'
          podman load -q -i ${{ github.workspace }}/pr-image.tar.gz
          podman images

      - name: Run container with safe privileges for testing
        run: |
          # Start in background to allow exec steps
          podman run --rm -d \
            --name bootc-test \
            --privileged \
            --userns=auto \
            -v /sys:/sys:ro \
            ${{ env.PR_IMAGE }} bash -lc 'sleep 600'

      - name: Inspect bootc bits and os-release
        run: |
          podman exec bootc-test bash -lc '
            echo "=== os-release ==="; cat /etc/os-release || true
            echo "=== bootc version ==="; bootc --version || true
            echo "=== rpm sanity ==="; rpm -qa | wc -l || true
          '

      - name: bootc status (should print tree/image info)
        run: |
          podman exec bootc-test bash -lc 'bootc status || true'

      - name: Systemd presence sanity
        run: |
          podman exec bootc-test bash -lc '
            command -v systemctl || true
            test -x /sbin/init && echo "/sbin/init present"
          '

      - name: Stop test container
        if: always()
        run: podman rm -f bootc-test || true


