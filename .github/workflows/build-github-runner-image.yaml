name: Build github-runner bootable container image
on:
  schedule:
    - cron: "0 2 * * 0" # Runs at 03:00, only on Sunday for security patching
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    #    paths:
    #      - "Containerfile"
    #      - "config.toml"
    #      - ".github/workflows/build-bootc-images.yaml"
    branches:
      - main
    paths:
      - github-runner.containerfile
concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

env:
  IMAGE_DESC: "${{ github.event.repository.description }}"
  #IMAGE_LOGO_URL: "https://raw.githubusercontent.com/astrovm/amyos/main/repo_files/amy-logo-white.png" # Put your own image here for a fancy profile on https://artifacthub.io/!
  #IMAGE_NAME: "${{ github.event.repository.name }}" # output image name, usually same as repo name
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit
  DEFAULT_TAG: "latest"
  IMAGE_NAME: github-runner-centos-bootc
  BASE_IMAGE: ghcr.io/${{ github.repository }}/homeserver-centos-bootc:latest
  CONTEXT: ./

jobs:
  build-bootc-image:
    name: Build Github Runner bootable container image
    runs-on: ubuntu-latest
    continue-on-error: false
    timeout-minutes: 10
    outputs:
      image: ${{ steps.build-image.outputs.image }}
      tags: ${{ steps.build-image.outputs.tags }}
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Clone the repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Log in to the Container registry
        uses: redhat-actions/podman-login@4934294ad0449894bcd1e9f191899d7292469603 # v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_PULL || secrets.PAT_RENOVATEBOT }}

      - name: Load image
        shell: bash
        run: |
          podman pull ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest || true
          systemctl --user enable --now podman.socket # for trivy
          export DOCKER_HOST='unix:///Users/<MY_USER>/.local/share/containers/podman/machine/podman-machine-default/podman.sock'

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like
          # 2022-02-08T15:38:15Z
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=0.1.${{ github.run_number }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          labels: |
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.description=${{ env.IMAGE_DESC }}
            org.opencontainers.image.documentation=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md
            org.opencontainers.image.source=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/github-runner.containerfile
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.url=https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            containers.bootc=1
          sep-tags: " "
          sep-annotations: " "

      # Write secrets to temp files for --secret src=
      - name: Prepare build secrets
        run: |
          umask 077
          printf '%s' "${{ secrets.PAT_RENOVATEBOT }}" > /tmp/REGISTRY_TOKEN
          printf '%s' "${{ secrets.GITHUBRUNNER_TOKEN }}" > /tmp/GITHUBRUNNER_TOKEN
          cp ${HOME}/.docker/config.json /tmp/creds

      - name: Use buildah build to create the image
        id: build-image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          context: ${{ env.CONTEXT }}
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          layers: true
          oci: false
          build-args: |
            REGISTRY_USERNAME="${{ github.repository_owner }}"
            REGISTRY_URL=ghcr.io
          containerfiles: |
            ${{ env.CONTEXT }}/github-runner.containerfile
          extra-args: |
            --secret id=registry_token,src=/tmp/REGISTRY_TOKEN
            --secret id=githubrunner_token,src=/tmp/GITHUBRUNNER_TOKEN
            --secret id=creds,src=/tmp/creds

      - name: Trivy (base:latest)
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: ${{ env.BASE_IMAGE }}
          format: table
          output: trivy.md
          ignore-unfixed: true
          #severity: HIGH,CRITICAL
          scanners: "vuln"
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true
       
      - name: Push to Container registry
        if: ${{ github.event_name != 'pull_request' }}
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.metadata.outputs.tags }}
          registry: ghcr.io/${{ github.repository }}
